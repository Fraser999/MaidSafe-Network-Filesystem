// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maidsafe/nfs/message_types/messages.proto

#ifndef PROTOBUF_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto__INCLUDED
#define PROTOBUF_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace maidsafe {
namespace nfs {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();
void protobuf_AssignDesc_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();
void protobuf_ShutdownFile_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();

class Nfs;

// ===================================================================

class Nfs : public ::google::protobuf::MessageLite {
 public:
  Nfs();
  virtual ~Nfs();
  
  Nfs(const Nfs& from);
  
  inline Nfs& operator=(const Nfs& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Nfs& default_instance();
  
  void Swap(Nfs* other);
  
  // implements Message ----------------------------------------------
  
  Nfs* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Nfs& from);
  void MergeFrom(const Nfs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 action_type = 1;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  inline ::google::protobuf::int32 action_type() const;
  inline void set_action_type(::google::protobuf::int32 value);
  
  // required int32 persona_type = 2;
  inline bool has_persona_type() const;
  inline void clear_persona_type();
  static const int kPersonaTypeFieldNumber = 2;
  inline ::google::protobuf::int32 persona_type() const;
  inline void set_persona_type(::google::protobuf::int32 value);
  
  // required int32 data_type = 3;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // required bytes destination = 4;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 4;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const void* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required bytes source = 5;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 5;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const void* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  
  // required bytes content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional bytes signature = 7;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 7;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  
  // @@protoc_insertion_point(class_scope:maidsafe.nfs.proto.Nfs)
 private:
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_persona_type();
  inline void clear_has_persona_type();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_signature();
  inline void clear_has_signature();
  
  ::google::protobuf::int32 action_type_;
  ::google::protobuf::int32 persona_type_;
  ::std::string* destination_;
  ::std::string* source_;
  ::std::string* content_;
  ::std::string* signature_;
  ::google::protobuf::int32 data_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();
  friend void protobuf_AssignDesc_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static Nfs* default_instance_;
};
// ===================================================================


// ===================================================================

// Nfs

// required int32 action_type = 1;
inline bool Nfs::has_action_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Nfs::set_has_action_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Nfs::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Nfs::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::google::protobuf::int32 Nfs::action_type() const {
  return action_type_;
}
inline void Nfs::set_action_type(::google::protobuf::int32 value) {
  set_has_action_type();
  action_type_ = value;
}

// required int32 persona_type = 2;
inline bool Nfs::has_persona_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Nfs::set_has_persona_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Nfs::clear_has_persona_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Nfs::clear_persona_type() {
  persona_type_ = 0;
  clear_has_persona_type();
}
inline ::google::protobuf::int32 Nfs::persona_type() const {
  return persona_type_;
}
inline void Nfs::set_persona_type(::google::protobuf::int32 value) {
  set_has_persona_type();
  persona_type_ = value;
}

// required int32 data_type = 3;
inline bool Nfs::has_data_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Nfs::set_has_data_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Nfs::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Nfs::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 Nfs::data_type() const {
  return data_type_;
}
inline void Nfs::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// required bytes destination = 4;
inline bool Nfs::has_destination() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Nfs::set_has_destination() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Nfs::clear_has_destination() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Nfs::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Nfs::destination() const {
  return *destination_;
}
inline void Nfs::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Nfs::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Nfs::set_destination(const void* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nfs::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Nfs::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes source = 5;
inline bool Nfs::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Nfs::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Nfs::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Nfs::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& Nfs::source() const {
  return *source_;
}
inline void Nfs::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Nfs::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Nfs::set_source(const void* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nfs::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* Nfs::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 6;
inline bool Nfs::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Nfs::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Nfs::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Nfs::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Nfs::content() const {
  return *content_;
}
inline void Nfs::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Nfs::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Nfs::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nfs::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Nfs::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes signature = 7;
inline bool Nfs::has_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Nfs::set_has_signature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Nfs::clear_has_signature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Nfs::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Nfs::signature() const {
  return *signature_;
}
inline void Nfs::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Nfs::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Nfs::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Nfs::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Nfs::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace nfs
}  // namespace maidsafe

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maidsafe_2fnfs_2fmessage_5ftypes_2fmessages_2eproto__INCLUDED
