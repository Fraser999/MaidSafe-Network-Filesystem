/* Copyright 2013 MaidSafe.net limited

This MaidSafe Software is licensed under the MaidSafe.net Commercial License, version 1.0 or later,
and The General Public License (GPL), version 3. By contributing code to this project You agree to
the terms laid out in the MaidSafe Contributor Agreement, version 1.0, found in the root directory
of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available at:

http://www.novinet.com/license

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the
License.
*/

#ifndef MAIDSAFE_NFS_MESSAGE_WRAPPER_VARIANT_H_
#define MAIDSAFE_NFS_MESSAGE_WRAPPER_VARIANT_H_

// ==================== Note =======================================================================
// This file is auto-generated by CMake from message_wrapper_variant.h.in
// Any modifications you make will be local only, as this file is not part of the git repository.
// =================================================================================================

#include <string>
#include <type_traits>

#include "boost/mpl/contains.hpp"
#include "maidsafe/nfs/message_wrapper.h"

#include "maidsafe/common/error.h"


namespace maidsafe {

namespace nfs {

template<typename MessageWrapperVariant, typename T>
MessageWrapperVariant GetVariantFromMessage(
    const TypeErasedMessageWrapper& message,
    typename std::enable_if<boost::mpl::contains<                                          // NOLINT
        typename MessageWrapperVariant::types, T>::value>::type* = 0) {
  return MessageWrapperVariant(T(message));
}

template<typename MessageWrapperVariant, typename T>
MessageWrapperVariant GetVariantFromMessage(
    const TypeErasedMessageWrapper& /*message*/,
    typename std::enable_if<!boost::mpl::contains<
        typename MessageWrapperVariant::types, T>::value>::type* = 0) {
  LOG(kError) << "Invalid persona or action type for this variant.";
  ThrowError(CommonErrors::invalid_parameter);
  return MessageWrapperVariant();
}

template<typename MessageWrapperVariant, MessageAction action, typename DestinationPersonaType>
void HandleDestination(MessageWrapperVariant& variant, const TypeErasedMessageWrapper& message) {
  auto source_persona(std::get<2>(message).data);
  switch (source_persona) {
    case Persona::kMaidNode:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kMaidNode>>>(message);
      break;
    case Persona::kMpidNode:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kMpidNode>>>(message);
      break;
    case Persona::kDataGetter:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kDataGetter>>>(message);
      break;
    case Persona::kMaidManager:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kMaidManager>>>(message);
      break;
    case Persona::kDataManager:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kDataManager>>>(message);
      break;
    case Persona::kPmidManager:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kPmidManager>>>(message);
      break;
    case Persona::kPmidNode:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kPmidNode>>>(message);
      break;
    case Persona::kMpidManager:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kMpidManager>>>(message);
      break;
    case Persona::kVersionManager:
      variant = GetVariantFromMessage<
                    MessageWrapperVariant,
                    MessageWrapper<action, DestinationPersonaType,
                                   SourcePersona<Persona::kVersionManager>>>(message);
      break;
    default:
      LOG(kError) << "Unknown source persona " << static_cast<int32_t>(source_persona);
      ThrowError(CommonErrors::invalid_parameter);
  }
}

template<typename MessageWrapperVariant, MessageAction action>
void HandleAction(MessageWrapperVariant& variant, const TypeErasedMessageWrapper& message) {
  auto destination_persona(std::get<1>(message).data);
  switch (destination_persona) {
    case Persona::kMaidNode:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kMaidNode>>(variant, message);
      break;
    case Persona::kMpidNode:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kMpidNode>>(variant, message);
      break;
    case Persona::kDataGetter:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kDataGetter>>(variant, message);
      break;
    case Persona::kMaidManager:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kMaidManager>>(variant, message);
      break;
    case Persona::kDataManager:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kDataManager>>(variant, message);
      break;
    case Persona::kPmidManager:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kPmidManager>>(variant, message);
      break;
    case Persona::kPmidNode:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kPmidNode>>(variant, message);
      break;
    case Persona::kMpidManager:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kMpidManager>>(variant, message);
      break;
    case Persona::kVersionManager:
      HandleDestination<MessageWrapperVariant,
                        action,
                        DestinationPersona<Persona::kVersionManager>>(variant, message);
      break;
    default:
      LOG(kError) << "Unknown destination persona " << static_cast<int32_t>(destination_persona);
      ThrowError(CommonErrors::invalid_parameter);
  }
}

template<typename MessageWrapperVariant>
MessageWrapperVariant GetVariant(const TypeErasedMessageWrapper& message) {
  MessageWrapperVariant variant;
  auto action(std::get<0>(message));
  switch (action) {
    case MessageAction::kGetRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetRequest>(variant, message);
      break;
    case MessageAction::kGetResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetResponse>(variant, message);
      break;
    case MessageAction::kPutRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kPutRequest>(variant, message);
      break;
    case MessageAction::kPutResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kPutResponse>(variant, message);
      break;
    case MessageAction::kDeleteRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kDeleteRequest>(variant, message);
      break;
    case MessageAction::kRegisterPmidRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kRegisterPmidRequest>(variant, message);
      break;
    case MessageAction::kRegisterPmidResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kRegisterPmidResponse>(variant, message);
      break;
    case MessageAction::kUnregisterPmidRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kUnregisterPmidRequest>(variant, message);
      break;
    case MessageAction::kUnregisterPmidResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kUnregisterPmidResponse>(variant, message);
      break;
    case MessageAction::kDeleteBranchUntilForkRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kDeleteBranchUntilForkRequest>(variant, message);
      break;
    case MessageAction::kDeleteBranchUntilForkResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kDeleteBranchUntilForkResponse>(variant, message);
      break;
    case MessageAction::kGetBranchRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetBranchRequest>(variant, message);
      break;
    case MessageAction::kGetBranchResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetBranchResponse>(variant, message);
      break;
    case MessageAction::kCreateAccountRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kCreateAccountRequest>(variant, message);
      break;
    case MessageAction::kCreateAccountResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kCreateAccountResponse>(variant, message);
      break;
    case MessageAction::kRemoveAccountRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kRemoveAccountRequest>(variant, message);
      break;
    case MessageAction::kRemoveAccountResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kRemoveAccountResponse>(variant, message);
      break;
    case MessageAction::kGetPmidHealthRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidHealthRequest>(variant, message);
      break;
    case MessageAction::kGetPmidHealthResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidHealthResponse>(variant, message);
      break;
    case MessageAction::kGetPmidTotalsRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidTotalsRequest>(variant, message);
      break;
    case MessageAction::kGetPmidTotalsResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidTotalsResponse>(variant, message);
      break;
    case MessageAction::kGetPmidAccountRequest:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidAccountRequest>(variant, message);
      break;
    case MessageAction::kGetPmidAccountResponse:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kGetPmidAccountResponse>(variant, message);
      break;
    case MessageAction::kStateChange:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kStateChange>(variant, message);
      break;
    case MessageAction::kSynchronise:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kSynchronise>(variant, message);
      break;
    case MessageAction::kAccountTransfer:
      HandleAction<MessageWrapperVariant,
                   MessageAction::kAccountTransfer>(variant, message);
      break;
    default:
      LOG(kError) << "Unknown action type " << static_cast<int32_t>(action);
      ThrowError(CommonErrors::invalid_parameter);
  }
  return variant;
}  // NOLINT

}  // namespace nfs  NOLINT

}  // namespace maidsafe  NOLINT

#endif  // MAIDSAFE_NFS_MESSAGE_WRAPPER_VARIANT_H_
